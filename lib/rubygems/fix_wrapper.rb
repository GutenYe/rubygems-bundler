module Gem::BundlerInstaller
  def bundler_generate_bin
    return if @spec.executables.nil? or @spec.executables.empty?

    # If the user has asked for the gem to be installed in a directory that is
    # the system gem directory, then use the system bin directory, else create
    # (or use) a new bin dir under the gem_home.
    bindir = @bin_dir ? @bin_dir : Gem.bindir(@gem_home)

    Dir.mkdir bindir unless File.exist? bindir
    raise Gem::FilePermissionError.new(bindir) unless File.writable? bindir

    @spec.executables.each do |filename|
      filename.untaint
      bin_path = File.expand_path "#{@spec.bindir}/#{filename}", @gem_dir
      if File.exist?(bin_path)
        mode = File.stat(bin_path).mode | 0111
        File.chmod mode, bin_path
      end

      if @wrappers then
        bundler_generate_bin_script filename, bindir
      end
    end
  end

  ##
  # Creates the scripts to run the applications in the gem.
  #--
  # The Windows script is generated in addition to the regular one due to a
  # bug or misfeature in the Windows shell's pipe. See
  # http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/193379

  def bundler_generate_bin_script(filename, bindir)
    bin_script_path = File.join bindir, formatted_program_filename(filename)

    FileUtils.rm_f bin_script_path # prior install may have been --no-wrappers

    File.open bin_script_path, 'wb', 0755 do |file|
      file.print bundler_app_script_text(filename)
    end

    say bin_script_path if Gem.configuration.really_verbose
  end

  ##
  # Return the text for an application file.
  def bundler_app_script_text(bin_file_name)
    <<-TEXT
#{shebang bin_file_name}
#
# This file was generated by RubyGems extended wrapper.
#
# The application '#{spec.name}' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

gemfile = ENV['BUNDLE_GEMFILE']
version = "#{Gem::Requirement.default}"

if !gemfile.nil? && File.exist?(gemfile)
  begin
    require 'bundler/setup'
  rescue LoadError
    gemfile = nil
  end
else
  gemfile = nil
end

if gemfile.nil?
  if ARGV.first =~ /^_(.*)_$/ and Gem::Version.correct? $1 then
    version = $1
    ARGV.shift
  end
  gem '#{spec.name}', version
end

load Gem.bin_path('#{spec.name}', '#{bin_file_name}', version)
TEXT
  end

end
module Gem
  post_install do |inst|
    class << inst
      include Gem::BundlerInstaller
    end
    inst.bundler_generate_bin
  end
end